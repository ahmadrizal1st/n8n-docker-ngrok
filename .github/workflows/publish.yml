name: Publish NPM package

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch: # Manual trigger

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      - name: Generate package-lock.json
        run: npm install --package-lock-only
      
      - name: Install dependencies
        run: npm ci
      
      - name: Make CLI executable
        run: chmod +x bin/index.js
      
      - name: Check if tests exist and run conditionally
        id: test_check
        run: |
          # Check if any test files exist
          if [ -d "__tests__" ] || [ -n "$(find . -name "*.test.js" -o -name "*.spec.js" -not -path "./node_modules/*")" ]; then
            echo "üß™ Tests found, running npm test..."
            npm test
          else
            echo "‚ö†Ô∏è No test files found, skipping tests..."
            echo "To add tests, create __tests__ directory or files with .test.js/.spec.js extension"
            # Create a flag to indicate no tests
            echo "tests_skipped=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Check version and prepare
        id: version_check
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Get latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Extract version number from tag (remove 'v' prefix)
          LATEST_VERSION=${LATEST_TAG#v}
          
          if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; then
            echo "üöÄ Version changed: $LATEST_VERSION -> $CURRENT_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Version not changed ($CURRENT_VERSION)"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Validate CLI functionality
        run: |
          # Test basic CLI functionality
          echo "Testing CLI help command..."
          node bin/index.js --help
          
          echo "Testing CLI version command..."
          node bin/index.js --version
          
          echo "‚úÖ CLI validation passed"
      
      - name: Verify file structure
        run: |
          echo "Checking required files..."
          
          # Check main CLI file
          if [ ! -f "bin/index.js" ]; then
            echo "‚ùå Error: bin/index.js not found"
            exit 1
          fi
          
          # Check scripts directory
          if [ ! -d "bin/scripts" ]; then
            echo "‚ùå Error: bin/scripts directory not found"
            exit 1
          fi
          
          # Check required script files
          for script in start.js stop.js debug.js status.js create.js; do
            if [ ! -f "bin/scripts/$script" ]; then
              echo "‚ùå Error: bin/scripts/$script not found"
              exit 1
            fi
          done
          
          # Check templates
          if [ ! -d "templates" ]; then
            echo "‚ùå Error: templates directory not found"
            exit 1
          fi
          
          echo "‚úÖ File structure validation passed"
      
      - name: Publish to npm
        if: ${{ steps.version_check.outputs.version_changed == 'true' }}
        run: |
          echo "Publishing version ${{ steps.version_check.outputs.new_version }} to npm..."
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Create Git tag
        if: ${{ steps.version_check.outputs.version_changed == 'true' }}
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a "v${{ steps.version_check.outputs.new_version }}" -m "Release v${{ steps.version_check.outputs.new_version }}"
          git push origin "v${{ steps.version_check.outputs.new_version }}"
      
      - name: Create GitHub Release
        if: ${{ steps.version_check.outputs.version_changed == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.version_check.outputs.new_version }}"
          name: "tunn8n v${{ steps.version_check.outputs.new_version }}"
          body: |
            ## üöÄ tunn8n CLI v${{ steps.version_check.outputs.new_version }}
            
            ### What's New
            - Automated release
            - Docker + n8n + Ngrok integration
            - CLI tool for easy management
            
            ### Features
            - `tunn8n create <project>` - Create new n8n project
            - `tunn8n start` - Start docker services
            - `tunn8n stop` - Stop docker services
            - `tunn8n status` - Check service status
            - `tunn8n debug` - Debug mode
            - `tunn8n init` - Initialize .env file
            
            ### Usage
            ```bash
            # Install globally
            npm install -g tunn8n
            
            # Create new project
            tunn8n create my-automation
            cd my-automation
            
            # Start services
            tunn8n start
            ```
          files: |
            README.md
            LICENSE
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Notify success
        if: ${{ steps.version_check.outputs.version_changed == 'true' }}
        run: |
          echo "üéâ Successfully published tunn8n v${{ steps.version_check.outputs.new_version }}"
          echo "üì¶ npm: https://www.npmjs.com/package/tunn8n"
          echo "üêô GitHub: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version_check.outputs.new_version }}"

  test-cli:
    runs-on: ubuntu-latest
    needs: publish
    if: ${{ needs.publish.result == 'success' }}
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install tunn8n globally (from npm)
        run: |
          npm install -g tunn8n@latest
          echo "Testing tunn8n installation..."
          tunn8n --version
          tunn8n --help
          echo "‚úÖ CLI installation test passed"